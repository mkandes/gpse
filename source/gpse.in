&gpseIn
   itpOn      = .FALSE.     ! Perform imaginary time propagation? .TRUE. = Yes ; .FALSE. = No
   rk4Lambda  = 2           ! 1 = Tan-Chen Lambda-1 ; 2 = Classical 4th-Order Runge-Kutta ; 3 = Tan-Chen Lambda-3 ; 4 = England ; 5 = Tan-Chen Lambda-5
   fdOrder    = 4           ! 2 = 2nd-Order Central Differences ; 4 = 4th-Order Central Differences 
   quadRule   = 1           ! 1 = Rectangle Rule ; 2 = Trapezoidal Rule
   nTsteps    = 204800       ! Number of time steps in simulation
   nTwrite    = 256          ! Period of writes to disk; i.e. Number of time steps between writes
   nX         = 128         ! Number of grid points along x-axis
   nXbc       = 2           ! 
   nY         = 128         ! Number of grid points along y-axis
   nYbc       = 2           !
   nZ         = 128         ! Number of grid points along z-axis
   nZbc       = 2           !
   t0         = 0.0         ! Time at start of simulation
   xO         = 0.0         ! X-coordinate of origin used to define computational grid
   yO         = 0.0         ! Y-coordinate of origin used to define computational grid
   zO         = 0.0         ! Z-coordinate of origin used to define computational grid
   dT         = 0.00048828125   ! Interval of time step
   dX         = 0.125       ! Distance between grid points along x-axis
   dY         = 0.125       ! Distance between grid points along y-axis
   dZ         = 0.125       ! Distance between grid points along z-axis
   gS         = 0.0         ! Nonlinear coupling constant
   psiRead    = .FALSE.     ! Read initial wave function from file? .TRUE. = Yes ; .FALSE. = No
   psiInFile  = 'psi.in'    ! Initial wave function filename ( if applicable ).
   psiInFmt   = 1           ! Format of input wave function file? 1 = Unformatted ( Binary ) ; 2 = Formatted ( GPI )
   psiInUnit  = 1000        !
   psiWrite   = .TRUE.      ! Write wave function to file? .TRUE. = Yes ; .FALSE. = No
   psiOutFmt  = 1           ! Format of output wave function file(s)? 1 = Unformatted ( Binary ) ; 2 = Formatted ( GPI ) ; 3 = VTK ; 4 = VTK_XML
   psiOutUnit = 1001        !   
   psiInit    = 3           ! 1 = Isotropic 3D SHO ; 2 = Anisotropic 3D SHO ; 3 = Axially-Symmetric 3D SHO
   psiNx      = 0           ! Degree of Hermite polynomial used to define anisotropic SHO wave function along x-axis
   psiNy      = 0           ! Degree of Hermite polynomial used to define anisotropic SHO wave function along y-axis
   psiNz      = 0           ! Degree of Hermite polynomial used to define both anisotropic and axially-symmetric SHO wave functions along z-axis
   psiNr      = 0           ! Degree of (associated) Laguerre polynomials used to define radial components of isotropic and axially-symmetric SHO wave functions
   psiMl      = 1           ! Projection of orbital angular momentum along z-axis for axially-symmetric SHO wave function
   psiXo      = 0.0         ! X-coordinate of origin used to define initial wave function
   psiYo      = 0.0         ! Y-coordinate of origin used to define initial wave function 
   psiZo      = 0.0         ! Z-coordinate of origin used to define initial wave function
   psiWx      = 1.0         ! Angular frequency of SHO potential along x-axis used to define anisotropic SHO wave function
   psiWy      = 1.0         ! Angular frequency of SHO potential along y-axis used to define anisotropic SHO wave function
   psiWz      = 1.0         ! Angular frequency of SHO potential along z-axis used to define both anisotropic and axially-symmetric SHO wave functions
   psiWr      = 1.0         ! Angular frequency of isotropic (radially-symmetric) SHO potential used to define ...
   vexRead    = .FALSE.     ! Read external potential from file? .TRUE. = Yes ; .FALSE. = No
   vexInFmt   = 1           ! 1 = Unformatted ( Binary ) ; 2 = Formatted ( GPI )
   vexInUnit  = 10000       !
   vexWrite   = .TRUE.      ! Write external potential to file? .TRUE. = Yes ; .FALSE. = No
   vexOutFmt  = 1           ! 1 = Unformatted ( Binary ) ; 2 = Formatted ( GPI ) ; 3 = VTK ; 4 = VTK_XML
   vexOutUnit = 10001       !
   vexLin     = .FALSE.     ! Apply linear potential? .TRUE. = Yes ; .FALSE. = No
   vexLinXo   = 0.0         !
   vexLinYo   = 0.0         !
   vexLinZo   = 0.0         !
   vexLinFx   = 0.0         !   
   vexLinFy   = 0.0         !   
   vexLinFz   = 0.0         !   
   vexSho     = .TRUE.      ! Apply simple harmonic oscillator potential? .TRUE. = Yes ; .FALSE. = No
   vexShoXo   = 0.0
   vexShoYo   = 0.0
   vexShoZo   = 0.0
   vexShoWx   = 1.0         !
   vexShoWy   = 1.0         !
   vexShoWz   = 1.0         !
   vexShor    = .FALSE.     ! Apply simple harmonic oscillator ring potential? .TRUE. = Yes ; .FALSE. = No
   vexShorXo  = 0.0
   vexShorYo  = 0.0
   vexShorZo  = 0.0 
   vexShorRo  = 0.0         !
   vexShorWr  = 1.0         !
   vexShorWz  = 1.0         !
/
